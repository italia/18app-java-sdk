package sdk;

import sdk.model.Certificate;
import sdk.soap.SOAPServerRequest;
import sdk.soap.VerificaVoucher_Service;
import sdk.soap.check.CheckRequestObj;
import sdk.soap.check.CheckResponse;
import sdk.soap.check.CheckResponseListener;
import sdk.soap.confirm.ConfirmRequestObj;
import sdk.soap.confirm.ConfirmResponse;
import sdk.soap.confirm.ConfirmResponseListener;
import sdk.soap.fault.FaultErrorCode;

import javax.xml.ws.soap.SOAPFaultException;

/**
 * This class is the core of the SDK. Here we will manage the requests and send to the users
 * the callbacks, with {@link CheckResponseListener} and {@link ConfirmResponseListener}.
 *
 * The {@link Certificate} is needed to perform the authentication of the client.
 * The {@link VerificaVoucher_Service} is used to check and confirm, and is an autogenerated
 * code from the WSDL configuration file.
 *
 * @author riccardobusetti
 */
public class EighteenAppMerchantService implements SOAPServerRequest {

    private VerificaVoucher_Service service;

    /**
     * Base contructor of the SDK.
     *
     * @param certificate object for client authentication
     */
    public EighteenAppMerchantService(Certificate certificate) {
        this.service = new VerificaVoucher_Service(
                certificate.getKeystorePath(),
                certificate.getPassword());
    }

    /**
     * Method to make a check request to the server.
     *
     * This method is the implementation of the one from {@link SOAPServerRequest}.
     *
     * @param requestObj is the object that contains all the needed informations to
     *                   make the call
     * @param checkResponseListener is an interface that contains all the callbacks
     *                              of the call
     */
    @Override
    public void makeCheckRequest(CheckRequestObj requestObj, CheckResponseListener checkResponseListener) {
        CheckResponse response = null;
        // Trying to get the check object
        try {
            // We need to check if the service isn't null before making the call
            // if is null we will call the callback onCheckRequestFailed
            if (service != null)
                response = service.getVerificaVoucherSOAP().check(requestObj).getCheckResp();
            else
                checkResponseListener.onCheckRequestFailed(RequestFailType.NULL_SERVICE);
        } catch (SOAPFaultException exc) {
            // Calls the callback onCheckError with the faultErrorCode
            checkResponseListener.onCheckError(getCompleteErrorCode(exc));
        }
        // Checking if the response isn't null
        // if is null we will call the callback onCheckResponseFailed
        if (response != null)
            checkResponseListener.onCheckSuccess(response);
        else
            checkResponseListener.onCheckResponseFailed(ResponseFailType.NULL_RESPONSE);
    }

    /**
     * Method to make a confirm request to the server.
     *
     * This method is the implementation of the one from {@link SOAPServerRequest}.
     *
     * @param confirmObj is the object that contains all the needed informations
     *                   to make the call
     * @param confirmResponseListener is an interface that contains all the callbacks
     *                                of the call
     */
    @Override
    public void makeConfirmRequest(ConfirmRequestObj confirmObj, ConfirmResponseListener confirmResponseListener) {
        ConfirmResponse response = null;
        // Trying to get the confirm object
        try {
            // We need to check if the service isn't null before making the call
            // if is null we will call the callback onConfirmRequestFailed
            if (service != null)
                response = service.getVerificaVoucherSOAP().confirm(confirmObj).getCheckResp();
            else
                confirmResponseListener.onConfirmRequestFailed(RequestFailType.NULL_SERVICE);
        } catch (SOAPFaultException exc) {
            // Calls the callback onConfirmError with the faultErrorCode
            confirmResponseListener.onConfirmError(getCompleteErrorCode(exc));
        }
        // Checking if the response isn't null
        // if is null we will call the callback onConfirmResponseFailed
        if (response != null)
            if (response.getEsito().equals("OK"))
                confirmResponseListener.onConfirmSuccess(true);
            else if (response.getEsito().equals("KO"))
                confirmResponseListener.onConfirmSuccess(false);
        else
            confirmResponseListener.onConfirmResponseFailed(ResponseFailType.NULL_RESPONSE);
    }

    /**
     * Helper method used to get the faultError with
     * all the needed information
     *
     * @param exc is the exception that contains the fault object
     *            with the faultErrorCode inside
     * @return the completed faultErrorCode enum
     */
    private FaultErrorCode getCompleteErrorCode(SOAPFaultException exc) {
        // Getting the fault code and the respective fault description
        FaultErrorCode faultErrorCode = getErrorCode(exc.getFault().getDetail().getFirstChild().getFirstChild().getFirstChild().getTextContent());
        String faultErrorDescription = exc.getFault().getDetail().getFirstChild().getFirstChild().getNextSibling().getFirstChild().getTextContent();
        // Checking if the fault message and error aren't null
        if (faultErrorDescription != null && faultErrorCode != null)
            faultErrorCode.setErrorDescription(faultErrorDescription);
        // Returning the complete faultError with the correct data
        return faultErrorCode;
    }

    /**
     * Helper method used to convert an error from string to enum
     *
     * @param error is the string error inside the soapFault
     * @return the corresponding enum
     */
    private FaultErrorCode getErrorCode(String error) {
        switch (error) {
            case "01":
                return FaultErrorCode.INPUT_PARAMETERS_ERROR;
            case "02":
                return FaultErrorCode.VOUCHER_NOT_AVAILABLE;
            case "03":
                return FaultErrorCode.USER_ACTIVATION_PROBLEM;
            case "04":
                return FaultErrorCode.NOT_ENOUGH_CREDITS;
            case "05":
                return FaultErrorCode.USER_INACTIVE;
            case "06":
                return FaultErrorCode.CATEGORY_AND_TYPE_NOT_ALIGNED;
            default:
                return null;
        }
    }

    /**
     * Enum that describes the fail types that
     * can occur during the request
     *
     * @author riccardobusetti
     */
    public enum RequestFailType {
        NULL_SERVICE
    }

    /**
     * Enum that describes the fail types that
     * can occur when we are getting the response
     *
     * @author riccardobusetti
     */
    public enum ResponseFailType {
        NULL_RESPONSE
    }
}
